BuildTime * pow(0.979517, LevelUp)



LevelUp{ (floor((newAvailable / 5) - Level)) }


############################################################################



if (newAvailable <= 1000) && (LevelUp >= 1) {

	Set members in Element;
	Resource++;

}


############################################################################

############################
#                          #
#  Level++(ele, progress)  #
#                          #
############################

builtHighScore = ele.available;

newCount = ele.count+floor(progress);
progressLeftovers = progress - floor(progress);
levelsGained = LevelUp(newCount, ele.level)

function LevelUp(newCount, Level, revolution) \\ return levels gained
{
	if (count < 1000)
		{ return floor((count / 5)); }

	else if (count < 10000) && (revolution >= 1)
		{ return floor(((count-1000) / 50) + 200); }

	else if (count < 100000) && (revolution >= 2)
		{ return floor(((count-10000) / 500) + 380); }

	else if (count < 1000000) && (revolution >= 3)
		{ return floor(((count-100000) / 5000) + 560); }

	else if (count < 10000000) && (revolution >= 4)
		{ return floor(((count-1000000) / 50000) + 740); }

	else if (count < 100000000) && (revolution >= 5)
		{ return floor(((count-10000000) / 500000) + 920); }

	else if (count < 2000000000) && (revolution >= 6)
		{ return floor(((count-100000000) / 5000000) + 1100); }

}



if (newCount > builtHighScore) \\ do we need to do a levelup check?
{
	ele.count = newCount;
	builtHighScore = newCount;
	ele.level = ele.level + levelsGained;
}
else \\ no levelup check? increment count only
{
	ele.count = newCount;
	ele.progress = progressLeftovers;
}